/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: authorize.proto */

#ifndef PROTOBUF_C_authorize_2eproto__INCLUDED
#define PROTOBUF_C_authorize_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IDTokenType.pb-c.h"
#include "IDTokenInfoType.pb-c.h"

typedef struct _AuthorizeReq AuthorizeReq;
typedef struct _AuthorizeResp AuthorizeResp;


/* --- enums --- */

typedef enum _AuthorizeResp__CertificateStatusEnumType {
  AUTHORIZE_RESP__CERTIFICATE_STATUS_ENUM_TYPE__Accepted = 0,
  AUTHORIZE_RESP__CERTIFICATE_STATUS_ENUM_TYPE__SignatureError = 1,
  AUTHORIZE_RESP__CERTIFICATE_STATUS_ENUM_TYPE__CertificateExpired = 2,
  AUTHORIZE_RESP__CERTIFICATE_STATUS_ENUM_TYPE__NoCertificateAvailable = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(AUTHORIZE_RESP__CERTIFICATE_STATUS_ENUM_TYPE)
} AuthorizeResp__CertificateStatusEnumType;

/* --- messages --- */

struct  _AuthorizeReq
{
  ProtobufCMessage base;
  IDTokenType *idtoken;
};
#define AUTHORIZE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&authorize_req__descriptor) \
    , NULL }


struct  _AuthorizeResp
{
  ProtobufCMessage base;
  protobuf_c_boolean has_certificatestatus;
  AuthorizeResp__CertificateStatusEnumType certificatestatus;
  IDTokenInfoType *idtokeninfo;
};
#define AUTHORIZE_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&authorize_resp__descriptor) \
    , 0, AUTHORIZE_RESP__CERTIFICATE_STATUS_ENUM_TYPE__Accepted, NULL }


/* AuthorizeReq methods */
void   authorize_req__init
                     (AuthorizeReq         *message);
size_t authorize_req__get_packed_size
                     (const AuthorizeReq   *message);
size_t authorize_req__pack
                     (const AuthorizeReq   *message,
                      uint8_t             *out);
size_t authorize_req__pack_to_buffer
                     (const AuthorizeReq   *message,
                      ProtobufCBuffer     *buffer);
AuthorizeReq *
       authorize_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   authorize_req__free_unpacked
                     (AuthorizeReq *message,
                      ProtobufCAllocator *allocator);
/* AuthorizeResp methods */
void   authorize_resp__init
                     (AuthorizeResp         *message);
size_t authorize_resp__get_packed_size
                     (const AuthorizeResp   *message);
size_t authorize_resp__pack
                     (const AuthorizeResp   *message,
                      uint8_t             *out);
size_t authorize_resp__pack_to_buffer
                     (const AuthorizeResp   *message,
                      ProtobufCBuffer     *buffer);
AuthorizeResp *
       authorize_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   authorize_resp__free_unpacked
                     (AuthorizeResp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*AuthorizeReq_Closure)
                 (const AuthorizeReq *message,
                  void *closure_data);
typedef void (*AuthorizeResp_Closure)
                 (const AuthorizeResp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor authorize_req__descriptor;
extern const ProtobufCMessageDescriptor authorize_resp__descriptor;
extern const ProtobufCEnumDescriptor    authorize_resp__certificate_status_enum_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_authorize_2eproto__INCLUDED */

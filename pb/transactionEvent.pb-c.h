/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: transactionEvent.proto */

#ifndef PROTOBUF_C_transactionEvent_2eproto__INCLUDED
#define PROTOBUF_C_transactionEvent_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "IDTokenType.pb-c.h"

typedef struct _TransactionEventReq TransactionEventReq;
typedef struct _TransactionEventReq__TransactionType TransactionEventReq__TransactionType;
typedef struct _TransactionEventResp TransactionEventResp;


/* --- enums --- */

typedef enum _TransactionEventReq__TransactionEventEnumType {
  TRANSACTION_EVENT_REQ__TRANSACTION_EVENT_ENUM_TYPE__Ended = 0,
  TRANSACTION_EVENT_REQ__TRANSACTION_EVENT_ENUM_TYPE__Started = 1,
  TRANSACTION_EVENT_REQ__TRANSACTION_EVENT_ENUM_TYPE__Updated = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSACTION_EVENT_REQ__TRANSACTION_EVENT_ENUM_TYPE)
} TransactionEventReq__TransactionEventEnumType;
typedef enum _TransactionEventReq__ChargingStateEnumType {
  TRANSACTION_EVENT_REQ__CHARGING_STATE_ENUM_TYPE__Charging = 0,
  TRANSACTION_EVENT_REQ__CHARGING_STATE_ENUM_TYPE__Suspended = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSACTION_EVENT_REQ__CHARGING_STATE_ENUM_TYPE)
} TransactionEventReq__ChargingStateEnumType;
typedef enum _TransactionEventReq__ReasonEnumType {
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__DeAuthorized = 0,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__Local = 1,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__EnergyLimitReached = 2,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__EVDisconnected = 3,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__GroundFault = 4,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__OvercurrrendFault = 5,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__PowerLoss = 6,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__PowerQuality = 7,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__Remote = 8,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__TimeLimitReached = 9,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__Timeout = 10,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__SOCLimitReached = 11,
  TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__ImmediateReset = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE)
} TransactionEventReq__ReasonEnumType;
typedef enum _TransactionEventResp__TransactionStatusEnumType {
  TRANSACTION_EVENT_RESP__TRANSACTION_STATUS_ENUM_TYPE__Accepted = 0,
  TRANSACTION_EVENT_RESP__TRANSACTION_STATUS_ENUM_TYPE__TranssctionProcing = 1,
  TRANSACTION_EVENT_RESP__TRANSACTION_STATUS_ENUM_TYPE__TransactionIdExist = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRANSACTION_EVENT_RESP__TRANSACTION_STATUS_ENUM_TYPE)
} TransactionEventResp__TransactionStatusEnumType;

/* --- messages --- */

struct  _TransactionEventReq__TransactionType
{
  ProtobufCMessage base;
  protobuf_c_boolean has_chargingstate;
  TransactionEventReq__ChargingStateEnumType chargingstate;
  protobuf_c_boolean has_timespentcharging;
  uint32_t timespentcharging;
  protobuf_c_boolean has_stoppedreason;
  TransactionEventReq__ReasonEnumType stoppedreason;
  protobuf_c_boolean has_transactionid;
  ProtobufCBinaryData transactionid;
};
#define TRANSACTION_EVENT_REQ__TRANSACTION_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction_event_req__transaction_type__descriptor) \
    , 0, TRANSACTION_EVENT_REQ__CHARGING_STATE_ENUM_TYPE__Charging, 0, 0, 0, TRANSACTION_EVENT_REQ__REASON_ENUM_TYPE__DeAuthorized, 0, {0,NULL} }


struct  _TransactionEventReq
{
  ProtobufCMessage base;
  TransactionEventReq__TransactionEventEnumType eventtype;
  ProtobufCBinaryData timestamp;
  TransactionEventReq__TransactionType *transaction;
  IDTokenType *idtoken;
  protobuf_c_boolean has_connectorid;
  uint32_t connectorid;
  protobuf_c_boolean has_totaltime;
  uint32_t totaltime;
  protobuf_c_boolean has_totalcost;
  uint32_t totalcost;
};
#define TRANSACTION_EVENT_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction_event_req__descriptor) \
    , TRANSACTION_EVENT_REQ__TRANSACTION_EVENT_ENUM_TYPE__Ended, {0,NULL}, NULL, NULL, 0, 0, 0, 0, 0, 0 }


struct  _TransactionEventResp
{
  ProtobufCMessage base;
  TransactionEventResp__TransactionStatusEnumType status;
  char *transactionid;
};
#define TRANSACTION_EVENT_RESP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction_event_resp__descriptor) \
    , TRANSACTION_EVENT_RESP__TRANSACTION_STATUS_ENUM_TYPE__Accepted, NULL }


/* TransactionEventReq__TransactionType methods */
void   transaction_event_req__transaction_type__init
                     (TransactionEventReq__TransactionType         *message);
/* TransactionEventReq methods */
void   transaction_event_req__init
                     (TransactionEventReq         *message);
size_t transaction_event_req__get_packed_size
                     (const TransactionEventReq   *message);
size_t transaction_event_req__pack
                     (const TransactionEventReq   *message,
                      uint8_t             *out);
size_t transaction_event_req__pack_to_buffer
                     (const TransactionEventReq   *message,
                      ProtobufCBuffer     *buffer);
TransactionEventReq *
       transaction_event_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction_event_req__free_unpacked
                     (TransactionEventReq *message,
                      ProtobufCAllocator *allocator);
/* TransactionEventResp methods */
void   transaction_event_resp__init
                     (TransactionEventResp         *message);
size_t transaction_event_resp__get_packed_size
                     (const TransactionEventResp   *message);
size_t transaction_event_resp__pack
                     (const TransactionEventResp   *message,
                      uint8_t             *out);
size_t transaction_event_resp__pack_to_buffer
                     (const TransactionEventResp   *message,
                      ProtobufCBuffer     *buffer);
TransactionEventResp *
       transaction_event_resp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction_event_resp__free_unpacked
                     (TransactionEventResp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TransactionEventReq__TransactionType_Closure)
                 (const TransactionEventReq__TransactionType *message,
                  void *closure_data);
typedef void (*TransactionEventReq_Closure)
                 (const TransactionEventReq *message,
                  void *closure_data);
typedef void (*TransactionEventResp_Closure)
                 (const TransactionEventResp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor transaction_event_req__descriptor;
extern const ProtobufCMessageDescriptor transaction_event_req__transaction_type__descriptor;
extern const ProtobufCEnumDescriptor    transaction_event_req__transaction_event_enum_type__descriptor;
extern const ProtobufCEnumDescriptor    transaction_event_req__charging_state_enum_type__descriptor;
extern const ProtobufCEnumDescriptor    transaction_event_req__reason_enum_type__descriptor;
extern const ProtobufCMessageDescriptor transaction_event_resp__descriptor;
extern const ProtobufCEnumDescriptor    transaction_event_resp__transaction_status_enum_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_transactionEvent_2eproto__INCLUDED */
